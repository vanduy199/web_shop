from fastapi import APIRouter, Depends, HTTPException, Form, UploadFile, File, status, Request
from sqlalchemy.orm import Session
from typing import Optional
import uuid, os

from app.core.config import SessionLocal
from app.models.support import SupportTicketModel, SupportMessageModel
from app.models.user import User
from app.dependencies.auth import get_current_user_optional
from app.schemas.support import SupportTicketResponse

router = APIRouter(prefix="/api/support", tags=["User Support"])

DEFAULT_GUEST_ID = 99999999  # ID m·∫∑c ƒë·ªãnh cho kh√°ch ·∫©n danh
UPLOAD_DIR = "app/static/support_files"  # th∆∞ m·ª•c l∆∞u file th·ª±c t·∫ø

# --- DB session dependency ---
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# --- L∆∞u file th·∫≠t v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n tƒ©nh ---
async def save_uploaded_file(file: Optional[UploadFile]) -> Optional[str]:
    if not file or not file.filename:
        return None
    os.makedirs(UPLOAD_DIR, exist_ok=True)
    ext = file.filename.split(".")[-1]
    unique_name = f"ticket_{uuid.uuid4().hex}.{ext}"
    abs_path = os.path.join(UPLOAD_DIR, unique_name)
    # ghi file
    with open(abs_path, "wb") as f:
        f.write(await file.read())
    # tr·∫£ v·ªÅ path tƒ©nh (s·∫Ω gh√©p v·ªõi base_url ƒë·ªÉ th√†nh full URL)
    return f"/static/support_files/{unique_name}"

# --- API G·ª¨I Y√äU C·∫¶U H·ªñ TR·ª¢ ---
@router.post(
    "/submit",
    status_code=status.HTTP_201_CREATED,
    response_model=SupportTicketResponse
)
async def submit_support_request(
    request: Request,
    support_name: str = Form(..., alias="support-name"),
    support_email: str = Form(..., alias="support-email"),
    support_type: str = Form(..., alias="support-type"),
    support_desc: str = Form(..., alias="support-desc"),
    support_phone: Optional[str] = Form(None, alias="support-phone"),
    support_file: Optional[UploadFile] = File(None, alias="support-file"),
    db: Session = Depends(get_db),
    current_user: Optional[User] = Depends(get_current_user_optional),
):
    user_id = current_user.id if current_user else DEFAULT_GUEST_ID

    # L∆∞u file th·∫≠t v√† t·∫°o URL c√¥ng khai
    rel_path = await save_uploaded_file(support_file)  # v√≠ d·ª•: /static/support_files/xxxx.png
    base_url = str(request.base_url).rstrip("/")       # v√≠ d·ª•: http://localhost:8000
    attachment_url = f"{base_url}{rel_path}" if rel_path else None

    # T·∫°o message tr∆∞·ªõc
    new_message = SupportMessageModel(
        sender_id=user_id,
        sender_type="Customer",
        message=support_desc,
        attachment_url=attachment_url,
    )
    db.add(new_message)
    db.flush()

    # T·∫°o ticket
    subject_line = f"[{support_type}] Y√™u c·∫ßu t·ª´ {support_name}"
    new_ticket = SupportTicketModel(
        user_id=user_id,
        subject=subject_line,
        issue_type=support_type,
        first_message_id=new_message.id,
        status="New",
        assigned_to_id=None,
        priority="Medium",
        requester_name=support_name,
        requester_email=support_email,
        requester_phone=support_phone,
    )
    db.add(new_ticket)
    db.commit()
    db.refresh(new_ticket)

    # G√°n ticket_id cho message
    new_message.ticket_id = new_ticket.id
    db.add(new_message)
    db.commit()
    db.refresh(new_message)

    return SupportTicketResponse(
        message="üé´ Y√™u c·∫ßu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n th√†nh c√¥ng!",
        attachment_url=attachment_url,
    )
