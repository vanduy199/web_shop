const tbody = document.querySelector(".order__content");
const API_BASE = "http://127.0.0.1:8000/orders/";
const token = localStorage.getItem("access_token");

function statusPriority(s) {
    if (!s) return 1;
    s = String(s).toLowerCase().trim();
    if (["pending", "ƒëang x·ª≠ l√Ω"].includes(s)) return 0;
    if (["processing", "delivering", "ƒëang giao"].includes(s)) return 1;
    if (["completed", "ho√†n th√†nh", "delivered"].includes(s)) return 2;
    if (["cancelled", "canceled", "ƒë√£ h·ªßy"].includes(s)) return 3;
    return 1;
}

async function loadOrders() {
    try {
        const res = await fetch(API_BASE,
            {
                method: 'GET',
                headers: {
                    "Authorization": `Bearer ${token}` 
                }
            }
        );
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i ƒë∆°n h√†ng t·ª´ server");

        let orders = await res.json();
        console.log(orders)
        if (!Array.isArray(orders)) orders = orders ? [orders] : [];

        // sort: pending/processing first, completed/cancelled last; within same priority sort by created_at desc
        orders.sort((a, b) => {
            const pa = statusPriority(a.status);
            const pb = statusPriority(b.status);
            if (pa !== pb) return pa - pb;
            const da = a.created_at ? new Date(a.created_at) : 0;
            const db = b.created_at ? new Date(b.created_at) : 0;
            return db - da;
        });

        tbody.innerHTML = "";
        if (orders.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" style="text-align:center;">B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</td>
                </tr>`;
            return;
        }

        // render t·ª´ng ƒë∆°n h√†ng
        orders.forEach(order => {
            const date = new Date(order.created_at).toLocaleString("vi-VN");
            const total = (order.total_price || 0).toLocaleString("vi-VN") + " ƒë";
            const status = order.status || "ƒêang x·ª≠ l√Ω";

            // N·∫øu c√≥ danh s√°ch s·∫£n ph·∫©m trong order.items
            const itemsHTML = order.items?.map(
                item => `
                    <div class="order__item">
                        <img src="${item.product_thumb || ''}" width="40" height="40" />
                        <span>${item.product_name}</span> 
                        <span class="text-muted">x${item.quantity}</span>
                    </div>
                `
            ).join("") || "<em>Kh√¥ng c√≥ s·∫£n ph·∫©m</em>";
            if (status == "pending") {
                tbody.innerHTML += `
                <tr data-id="${order.id}">
                    <td>#${order.id}</td>
                    <td>${itemsHTML}</td>
                    <td>${date}</td>
                    <td>${total}</td>
                    <td>
                        <span class="badge ${getStatusBadge(status)}">${status}</span>
                    </td>
                    <td>
                        <button class="buttonDel" data-id="${order.id}">X√ìA</button>
                    </td>
                </tr>`;
            }
            else {
                tbody.innerHTML += `
                <tr data-id="${order.id}">
                    <td>#${order.id}</td>
                    <td>${itemsHTML}</td>
                    <td>${date}</td>
                    <td>${total}</td>
                    <td>
                        <span class="badge ${getStatusBadge(status)}">${status}</span>
                    </td>
                </tr>`;
            }

            
            const buttons = document.getElementsByClassName("buttonDel");

            Array.from(buttons).forEach(button => {
                button.onclick = async function () {
                const id = button.getAttribute("data-id");

                const res = await fetch(`${API_BASE}${id}`, {
                method: 'DELETE',
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
                });

                if (res.ok) {
                    alert("X√≥a th√†nh c√¥ng!");
                    loadOrders();
                } else {
                const err = await res.json();
                alert(`L·ªói: ${err.detail || "Kh√¥ng th·ªÉ x√≥a"}`);
                }
            };
    });
        });

    } catch (err) {
        console.error("L·ªói load ƒë∆°n h√†ng:", err);
        tbody.innerHTML = `
            <tr>
                <td colspan="5" style="text-align:center; color:red;">
                    L·ªói t·∫£i ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.
                </td>
            </tr>`;
    }
}

// üü° Helper: m√†u tr·∫°ng th√°i ƒë∆°n h√†ng
function getStatusBadge(status) {
    switch (status.toLowerCase()) {
        case "ƒëang giao":
        case "ƒëang x·ª≠ l√Ω":
            return "bg-warning text-dark";
        case "ho√†n th√†nh":
            return "bg-success";
        case "ƒë√£ h·ªßy":
            return "bg-danger";
        default:
            return "bg-secondary";
    }
}


// üü¢ G·ªçi khi m·ªü trang
window.addEventListener("DOMContentLoaded", loadOrders);
