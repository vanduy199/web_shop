
var productId = localStorage.getItem("productId");

let name1 = "Samsung Galaxy S24 5G 8GB/256GB";
async function fetchProducts(id = null) {
    try {
        let url = "http://127.0.0.1:8000/api/product_id";
        if (id) url += "?id=" + id;
        const response = await fetch(url);
        const data = await response.json();
        const products = data;
        var headingInfo = document.querySelector(".info__heading");
        headingInfo.innerText = products.name;
        var breadcrumbInfo = document.querySelector(".info__heading");
        breadcrumbInfo.innerText = products.name;

        let img1 = document.querySelector("#img1");
        img1.src = products.images[0].img;

        let img2 = document.querySelector("#img2");
        img2.src = products.images[1].img;

        let img3 = document.querySelector("#img3");
        img3.src = products.images[2].img;

        let img4 = document.querySelector("#img4");
        img4.src = products.images[3].img;

        let img5 = document.querySelector("#img5");
        img5.src = products.images[4].img;

        var priceInfo = document.querySelector(".info__right-price");
        priceInfo.innerHTML = products.price.toLocaleString() + "‚Ç´";
        console.log(data);
        const grouped = data.attributes.reduce((acc, item) => {
            if (!acc[item.loai_cau_hinh]) acc[item.loai_cau_hinh] = [];
            acc[item.loai_cau_hinh].push(item);
            return acc;
        }, {});
        const order = {
            "C·∫•u h√¨nh": 1,
            "Camera & M√†n h√¨nh": 2,
            "K·∫øt n·ªëi": 3,
            "Ti·ªán √≠ch": 4,
            "Pin & S·∫°c": 5,
            "Thi·∫øt k·∫ø & Ch·∫•t li·ªáu": 6
        };

// L·∫•y c√°c nh√≥m t·ª´ object grouped
        let groups = Object.keys(grouped);
        // add to cart
        var btnAddCart = document.querySelector(".groupbtn__cart");
        btnAddCart.onclick = function() {
            addToCart(productId, 1);
        };
        
        // S·∫Øp x·∫øp l·∫°i theo order
        groups.sort((a, b) => (order[a] || 999) - (order[b] || 999));
        const container = document.getElementById("specifications");
        groups.forEach(group => {
            const groupDiv = document.createElement("div");
            groupDiv.classList.add("spec-group");

            const header = document.createElement("div");
            header.classList.add("spec-header");
            header.textContent = group;
            
            const content = document.createElement("div");
            content.style.display = "block";
            content.classList.add("spec-content");

            grouped[group].forEach(item => {
                const row = document.createElement("div");
                row.classList.add("spec-item");

                row.innerHTML = `
                <div class="spec-key">${item.key}</div>
                <div class="spec-value">${item.value}</div>
            `;
                content.appendChild(row);
            });

            groupDiv.appendChild(header);
            groupDiv.appendChild(content);
            container.appendChild(groupDiv);
        });
    } catch (error) {
        console.error("Error fetching products:", error);
        showMessage("Kh√¥ng t·∫£i ƒë∆∞·ª£c s·∫£n ph·∫©m!", "error");
    }
};
fetchProducts(productId);

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng


function seeMore() {
    var dots = document.getElementById("dots");
    var moreText = document.getElementById("more");
    var btnText = document.getElementById("myBtn");

    if (dots.style.display === "none") {
        dots.style.display = "inline";
        btnText.innerHTML = "Xem th√™m";
        moreText.style.display = "none";
    } else {
        dots.style.display = "none";
        btnText.innerHTML = "Thu g·ªçn";
        moreText.style.display = "inline";
    }
}

// ƒë·∫∑t l·ªãch s·ª≠a ch·ªØa
var booking = document.querySelector(".groupbtn__order");
booking.addEventListener("click", function () {
    localStorage.setItem("point", "info");
    window.location.href = "booking.html";
});
var swiper = new Swiper(".mySwiper", {
  slidesPerView: 1,
  navigation: {
    nextEl: ".swiper-button-next",
    prevEl: ".swiper-button-prev",
  },
  pagination: {
    el: ".swiper-pagination",
    clickable: true,
  },
});
const API_BASE = "http://127.0.0.1:8000/cart";


const token = localStorage.getItem("access_token"); 

const headers = token
  ? { "Content-Type": "application/json", "Authorization": `Bearer ${token}` }
  : { "Content-Type": "application/json" };
const userId = null;
async function addToCart(productId, quantity = 1) {
    try {
        console.log("Th√™m v√†o gi·ªè:", productId, quantity);

        // ƒê·∫£m b·∫£o URL l√† /cart/ cho POST
        const res = await fetch(`${API_BASE}/`, { 
            method: "POST",
            headers: headers, 
            body: JSON.stringify({
                product_id: Number(productId),
                quantity: Number(quantity)
            }),
        });

        let data = null;
        try { data = await res.json(); } catch (e) { /* L·ªói khi ph·∫£n h·ªìi kh√¥ng ph·∫£i JSON */ }
        if (!res.ok) {
            console.error("Th√™m th·∫•t b·∫°i:", res.status, data);
            
            let errorMessage = `L·ªñI API ${res.status}`;
            
            errorMessage = `Th√™m th·∫•t b·∫°i: ${data.detail}`;

            alert(errorMessage);
            return;
        }

        console.log("Th√™m th√†nh c√¥ng:", data);
        
        if (typeof loadCart === 'function') {
            await loadCart();
        }
        
        alert("ƒê√£ th√™m v√†o gi·ªè h√†ng!");
    } catch (err) {
        console.error("L·ªói m·∫°ng ho·∫∑c JS:", err);
        alert("L·ªói m·∫°ng ho·∫∑c l·ªói JavaScript. Ki·ªÉm tra console.");
    }
}


// ‚úÖ FIXED: Activity tracking
const API_ACTIVITY = "http://127.0.0.1:8000/activity/";


async function activity(productId) {
    try {
        // ‚ùå FIX 1: Ki·ªÉm tra productId
        if (!productId) {
            console.warn("No productId provided for activity tracking");
            return;
        }

        console.log("Tracking activity for product:", productId);

        // ‚ùå FIX 2: URL ƒë√∫ng - kh√¥ng c√≥ "/" th·ª´a ·ªü cu·ªëi
        const res = await fetch(API_ACTIVITY, { 
            method: "POST",
            headers: headers, 
            body: JSON.stringify({
                product_id: Number(productId),
                action: "click"
            }),
        });

        // ‚ùå FIX 3: Parse JSON an to√†n
        let data = null;
        try { 
            data = await res.json(); 
        } catch (e) { 
            console.warn("Response is not JSON:", e);
        }

        // ‚ùå FIX 4: X·ª≠ l√Ω l·ªói ƒë√∫ng
        if (!res.ok) {
            const errorMessage = data?.detail || `HTTP ${res.status}`;
            console.error("Activity tracking failed:", errorMessage);
            // Kh√¥ng alert v√¨ ƒë√¢y l√† background task, kh√¥ng c·∫ßn th√¥ng b√°o user
            return;
        }

        console.log("Activity tracked successfully:", data);

    } catch (err) {
        console.error("Network or JS error in activity:", err);
        // Kh√¥ng alert v√¨ ƒë√¢y l√† background task
    }
}

// ‚ùå FIX 5: G·ªçi activity sau khi DOM ready v√† c√≥ productId
var productId = localStorage.getItem("productId");

document.addEventListener('DOMContentLoaded', function() {
    if (productId) {
        activity(productId);
    } else {
        console.warn("No productId found in localStorage");
    }
});
const API_URL = "http://localhost:8000";  // üîÅ thay b·∫±ng backend c·ªßa b·∫°n
const PRODUCT_ID = 15;                    // üß© id s·∫£n ph·∫©m hi·ªán t·∫°i

// G·ª≠i request c√≥ token
async function fetchWithAuth(url, options = {}) {
  options.headers = {
    ...options.headers,
    "Authorization": `Bearer ${token}`,
    "Content-Type": "application/json"
  };
  const res = await fetch(url, options);
  if (!res.ok) throw new Error("L·ªói khi g·ªçi API");
  return res.json();
}

// L·∫•y danh s√°ch b√¨nh lu·∫≠n
async function loadReviews() {
  try {
    const res = await fetch(`${API_URL}/reviews/?product_id=${PRODUCT_ID}`);
    const data = await res.json();
    renderReviews(data);
  } catch (err) {
    console.error(err);
  }
}

// G·ª≠i b√¨nh lu·∫≠n cha
async function sendComment() {
  const comment = document.getElementById("commentInput").value.trim();
  if (!comment) return alert("Vui l√≤ng nh·∫≠p n·ªôi dung!");

  await fetchWithAuth(`${API_URL}/reviews/`, {
    method: "POST",
    body: JSON.stringify({
      product_id: PRODUCT_ID,
      comment: comment,
      rating: null,
      id_parent: null
    })
  });

  document.getElementById("commentInput").value = "";
  loadReviews();
}

// G·ª≠i ph·∫£n h·ªìi con
async function sendReply(parentId, productId) {
  const input = document.getElementById(`reply-${parentId}`);
  const text = input.value.trim();
  if (!text) return alert("Nh·∫≠p ph·∫£n h·ªìi tr∆∞·ªõc khi g·ª≠i!");

  await fetchWithAuth(`${API_URL}/reviews/response`, {
    method: "POST",
    body: JSON.stringify({
      product_id: productId,
      comment: text
    })
  });

  input.value = "";
  loadReviews();
}

// Hi·ªÉn th·ªã danh s√°ch b√¨nh lu·∫≠n
function renderReviews(reviews) {
  const container = document.getElementById("reviewsContainer");
  container.innerHTML = "";

  reviews.forEach(rv => {
    const div = document.createElement("div");
    div.className = "review";
    div.innerHTML = `
      <p><b>Ng∆∞·ªùi d√πng #${rv.user_id}</b> (${new Date(rv.created_at).toLocaleString()}):</p>
      <p>${rv.comment ?? ""}</p>
      <div class="reply-box">
        <input type="text" id="reply-${rv.product_id}-${rv.user_id}" placeholder="Ph·∫£n h·ªìi b√¨nh lu·∫≠n..." />
        <button onclick="sendReply(${rv.product_id}, ${rv.product_id})">G·ª≠i</button>
      </div>
      ${rv.comment_children.map(child => `
        <div class="reply">‚Ü≥ ${child.comment}</div>
      `).join("")}
    `;
    container.appendChild(div);
  });
}

// Kh·ªüi t·∫°o
document.getElementById("sendCommentBtn").addEventListener("click", sendComment);
loadReviews();