// ==================== C·∫§U H√åNH ====================
const reviewsTbody = document.querySelector(".reviews-management__content");
const REVIEWS_API = "http://127.0.0.1:8000/reviews/all_reviews";
const PRODUCTS_API = "http://127.0.0.1:8000/products";
const USERS_API = "http://127.0.0.1:8000/users";

let reviewsData = [];
let productsMap = {};
let usersMap = {};

// ==================== LOAD T·∫§T C·∫¢ REVIEWS ====================
async function loadAllReviews() {
    try {
        const token = localStorage.getItem('access_token');
        if (!token) {
            reviewsTbody.innerHTML = `
                <tr><td colspan="8" style="text-align:center;color:red;">
                    Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i
                </td></tr>`;
            return;
        }

        const res = await fetch(REVIEWS_API, {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        });

        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch reviews");
        reviewsData = await res.json();
        
        // Load th√¥ng tin s·∫£n ph·∫©m v√† ng∆∞·ªùi d√πng
        await loadProductsAndUsers();
        
        renderReviews(reviewsData);

    } catch (err) {
        console.error("L·ªói t·∫£i reviews:", err);
        reviewsTbody.innerHTML = `
            <tr><td colspan="8" style="text-align:center;color:red;">
                Kh√¥ng th·ªÉ t·∫£i reviews. Vui l√≤ng th·ª≠ l·∫°i.
            </td></tr>`;
    }
}

// ==================== LOAD S·∫¢N PH·∫®M V√Ä NG∆Ø·ªúI D√ôNG ====================
async function loadProductsAndUsers() {
    try {
        const token = localStorage.getItem('access_token');
        
        // Load s·∫£n ph·∫©m
        const productsRes = await fetch(PRODUCTS_API);
        if (productsRes.ok) {
            const products = await productsRes.json();
            products.forEach(p => {
                productsMap[p.id] = p.name;
            });
        }
        
        // Load ng∆∞·ªùi d√πng (n·∫øu c√≥ endpoint)
        try {
            const usersRes = await fetch(USERS_API, {
                headers: { "Authorization": `Bearer ${token}` }
            });
            if (usersRes.ok) {
                const users = await usersRes.json();
                if (Array.isArray(users)) {
                    users.forEach(u => {
                        usersMap[u.id] = u.full_name || u.email;
                    });
                }
            }
        } catch (e) {
            console.log("Kh√¥ng th·ªÉ load danh s√°ch ng∆∞·ªùi d√πng");
        }
    } catch (err) {
        console.error("L·ªói load s·∫£n ph·∫©m/ng∆∞·ªùi d√πng:", err);
    }
}

// ==================== HI·ªÇN TH·ªä REVIEWS ====================
function renderReviews(reviews) {
    reviewsTbody.innerHTML = "";

    if (!reviews || reviews.length === 0) {
        reviewsTbody.innerHTML = `
            <tr><td colspan="8" style="text-align:center;">Kh√¥ng c√≥ reviews n√†o</td></tr>`;
        return;
    }

    reviews.forEach(review => {
        const date = new Date(review.created_at).toLocaleString("vi-VN");
        const productName = review.product_name || `S·∫£n ph·∫©m #${review.product_id}`;
        const userName = usersMap[review.user_id] || `User #${review.user_id}`;
        const rating = review.rating ? `${'‚≠ê'.repeat(review.rating)} (${review.rating}/5)` : "Kh√¥ng c√≥ ƒë√°nh gi√°";
        const comment = review.comment ? review.comment.substring(0, 50) + "..." : "Kh√¥ng c√≥ n·ªôi dung";
        const status = review.status || "Ch∆∞a tr·∫£ l·ªùi";
        const statusBadge = status === "ƒê√£ tr·∫£ l·ªùi" 
            ? '<span class="badge bg-success">ƒê√£ tr·∫£ l·ªùi</span>' 
            : '<span class="badge bg-warning text-dark">Ch∆∞a tr·∫£ l·ªùi</span>';

        const row = `
            <tr>
                <td><strong>#${review.id}</strong></td>
                <td>${productName}</td>
                <td>${userName}</td>
                <td>${rating}</td>
                <td title="${review.comment || 'N/A'}" style="max-width:200px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;">
                    ${comment}
                </td>
                <td>${date}</td>
                <td>${statusBadge}</td>
                <td>
                    <button class="btn btn-sm btn-info" onclick="viewReviewDetail(${review.id})">
                        <i class="fa-solid fa-eye"></i>
                    </button>
                    ${status === "Ch∆∞a tr·∫£ l·ªùi" ? `
                        <button class="btn btn-sm btn-primary" onclick="replyReview(${review.id})">
                            <i class="fa-solid fa-reply"></i>
                        </button>
                    ` : ''}
                </td>
            </tr>
        `;
        reviewsTbody.innerHTML += row;
    });
}

// ==================== XEM CHI TI·∫æT REVIEW ====================
function viewReviewDetail(reviewId) {
    const review = reviewsData.find(r => r.id === reviewId);
    if (!review) return;

    const productName = review.product_name || `S·∫£n ph·∫©m #${review.product_id}`;
    const userName = usersMap[review.user_id] || `User #${review.user_id}`;
    const rating = review.rating ? `${'‚≠ê'.repeat(review.rating)} (${review.rating}/5)` : "Kh√¥ng c√≥ ƒë√°nh gi√°";

    alert(`
üìã Chi Ti·∫øt Review #${review.id}

üë§ Ng∆∞·ªùi D√πng: ${userName}
üõçÔ∏è S·∫£n Ph·∫©m: ${productName}
‚≠ê ƒê√°nh Gi√°: ${rating}
üí¨ N·ªôi Dung: ${review.comment || 'Kh√¥ng c√≥ n·ªôi dung'}
üìÖ Ng√†y G·ª≠i: ${new Date(review.created_at).toLocaleString('vi-VN')}
üìä Tr·∫°ng Th√°i: ${review.status || 'Ch∆∞a tr·∫£ l·ªùi'}
    `);
}

// ==================== TR·∫¢ L·ªúI REVIEW ====================
function replyReview(reviewId) {
    const reply = prompt("Nh·∫≠p c√¢u tr·∫£ l·ªùi cho review n√†y:");
    if (!reply || reply.trim() === "") return;

    const token = localStorage.getItem('access_token');
    const currentUser = JSON.parse(localStorage.getItem('current_user') || '{}');

    if (!token || !currentUser.id) {
        alert("Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
        return;
    }

    submitReply(reviewId, reply, token, currentUser.id);
}

// ==================== G·ª¨I TR·∫¢ L·ªúI ====================
async function submitReply(parentId, comment, token, userId) {
    try {
        const res = await fetch(`http://127.0.0.1:8000/reviews/response?id_parent=${parentId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`
            },
            body: JSON.stringify({
                product_id: reviewsData.find(r => r.id === parentId)?.product_id || 200,
                comment: comment
            })
        });

        if (!res.ok) {
            const err = await res.json();
            throw new Error(err.detail || "L·ªói g·ª≠i tr·∫£ l·ªùi");
        }

        alert("‚úÖ Tr·∫£ l·ªùi th√†nh c√¥ng!");
        // Reload danh s√°ch
        loadAllReviews();

    } catch (err) {
        console.error("L·ªói g·ª≠i tr·∫£ l·ªùi:", err);
        alert("‚ùå L·ªói: " + err.message);
    }
}

// ==================== KH·ªûI T·∫†O KHI TRANG T·∫¢I ====================
document.addEventListener('DOMContentLoaded', function() {
    // Load reviews khi click v√†o menu Reviews
    const reviewsMenuItem = document.querySelector('[data-target="reviews-pane"]');
    if (reviewsMenuItem) {
        reviewsMenuItem.addEventListener('click', loadAllReviews);
    }
});
